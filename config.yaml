main:
  name: 'efficient capsnet'
  seed: 22
  cuda: True
  verbosity: 0  # 0: debug, 1: info, 2: warning, 3: error

data_loader:
  type: 'MnistDataLoader'
  args: # see utils/data_loader.py
    data_dir: 'data/'
    batch_size: 16
    shuffle: True
    validation_split: 0.1
    num_workers: 1

arch:
  type: 'FinalCapsNet'
  args: {} # see model/model.py
optimizer:
  type: 'Adam'
  args: # see torch.optim
    lr: 5.e-4
lr_scheduler:
  type: 'ExponentialLR'
  args: # see torch.optim.lr_scheduler
    gamma: 0.98

loss:
  type: 'TotalLoss'
  args: # see model/losses.py
    m_pos: 0.9
    m_neg: 0.1
    lambda_: 0.5
    recon_factor: 5.e-4
metrics: # see model/metrics.py
  - 'accuracy'

trainer:
  epochs: 5  # 100 in paper
  log_step: 1000  # log data every x step of (len(data)/batch_size)
  save_dir: 'saved/'
  save_period: 1  # save data on every x epoch
  verbosity: 0  # same as main.verbosity config
  monitor: 'min val_loss'
  early_stop: 10  # early stop training if not improve
  tensorboard: True  # use tensorboard
  wandb: False  # not yet implemented

logger:  # global logger config
  version: 1
  disable_existing_loggers: False
  formatters:
    brief:
      format: '%(message)s'
    precise:
      format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
  handlers:
    console:  # configure output logs to console
      class: 'logging.StreamHandler'
      level: 'DEBUG'
      formatter: 'brief'
      stream: 'ext://sys.stdout'
    file:  # write logs to a file
      class: 'logging.handlers.RotatingFileHandler'
      level: 'INFO'
      formatter: 'precise'
      filename: 'info.log'
      maxBytes: 1.e+6
      backupCount: 5
      encoding: 'utf8'
  root:  # new logger object will inherit from this
    level: 'INFO'
    handlers:
      - 'console'
      - 'file'